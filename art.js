function pause(){return!1}function draw0(n){stroke("purple");for(var a=0;a<c0.points;a++){var i=a,t=a+1;t=void 0===n[t]?0:t,n.length>c0.points&&line(n[i][0].x,n[i][0].y,n[t][0].x,n[t][0].y)}}function draw1(n){stroke("red");for(var a=0;a<3*c2.points;a++){var i=a,t=a+1;t=void 0===n[t]?0:t,n.length>3*c2.points&&line(n[i][2].x,n[i][2].y,n[t][2].x,n[t][2].y)}}function draw2(n){stroke("orange");for(var a=0;a<n.length;a++)a>0&&line(n[a][0].x,n[a][0].y,n[a][1].x,n[a][1].y)}function draw3(n){stroke("yellow");for(var a=0;a<n.length;a++)a>0&&line(n[a][0].x,n[a][0].y,n[a][2].x,n[a][2].y)}function draw4(n){stroke(map(audio.avgMax,calibrated.loudness.max,calibrated.silence.max,0,255),map(audio.avgMax,calibrated.loudness.min,calibrated.silence.min,0,255),0),strokeWeight(1+20*audioOsc);for(var a=0;a<n.length;a++){var i=a,t=i-1;t=void 0===n[t]?0:t,a>0&&(line(n[i][1].x,n[i][1].y,n[t][1].x,n[t][1].y),line(n[t][1].x,n[t][1].y,n[t][2].x,n[t][2].y),line(n[t][2].x,n[t][2].y,n[i][2].x,n[i][2].y))}strokeWeight(1)}function drawLines(){0===lineCount&&(calculateCoordinates(),lineCountMax=getMaxLineCount(),lineCount=1);var n=generateLineArray(lineCount);background(0,0,0,Math.abs(map(audio.osc,calibrated.loudness.osc,calibrated.silence.osc,25,150))),draw0(n),draw1(n),draw2(n),draw3(n),draw4(n),!0===reverse?lineCount--:lineCount++,lineCount<1?(lineCount=0,reverse=!1):lineCount>lineCountMax&&(reverse=!0)}function calculateCoordinates(){return c0.points=getRandomBetweenMinAndMax(),c1.points=getRandomBetweenMinAndMax(),c2.points=getRandomBetweenMinAndMax(),c0.points<abs_min_points&&(c0.points=abs_min_points),c0.points>abs_max_points&&(c0.points=abs_max_points),c1.points<abs_min_points&&(c1.points=abs_min_points),c1.points>abs_max_points&&(c1.points=abs_max_points),c2.points<abs_min_points&&(c2.points=abs_min_points),c2.points>abs_max_points&&(c2.points=abs_max_points),c0.angle=2*Math.PI/c0.points,c1.angle=2*Math.PI/c1.points,c2.angle=2*Math.PI/c2.points,c0.coordinates.setOptions({radius:c0.radius,angle:c0.angle}),c1.coordinates.setOptions({radius:c1.radius,angle:c1.angle}),c2.coordinates.setOptions({radius:c2.radius,angle:c2.angle}),lcm02=leastCommonMultiple(c0.points,c2.points),lcm01=leastCommonMultiple(c0.points,c1.points),lcm12=leastCommonMultiple(c1.points,c2.points),{c0:c0,c1:c1,c2:c2}}function generateLineArray(n){c0.coordinates.init(),c1.coordinates.init(),c2.coordinates.init();for(var a=[],i=0;i<n;i++)c0.coordinates.move(),c1.coordinates.move(),c2.coordinates.move(),a.push([{x:c0.coordinates.pos.x,y:c0.coordinates.pos.y},{x:c1.coordinates.pos.x,y:c1.coordinates.pos.y},{x:c2.coordinates.pos.x,y:c2.coordinates.pos.y}]);return a}function getMaxLineCount(){return lcm01+lcm02+lcm12+c1.points+c2.points}function getRandomBetweenMinAndMax(){var n=Math.round(audioAvgOsc*(abs_max_points-abs_min_points)+abs_min_points),a=Math.round((audioAvgOsc-audioAvgOsc/2)*(abs_max_points/2-abs_min_points)+abs_min_points);return Math.floor(Math.random()*(n-a+1)+abs_min_points)}function analyzeAudioData(n){audio.avgMax=getAvg(average,"max",n.max,50),audio.avgMin=getAvg(average,"min",n.min,50),audio.avgOsc=getAvg(average,"osc",n.osc,50),audio.avgOsc5=getAvg(average,"osc",n.osc,5),audioAvgMax=Math.round(map(audio.avgMax,calibrated.loudness.max,calibrated.silence.max,300,1)),audioMax=map(n.max,calibrated.loudness.max,calibrated.silence.max,300,1),audioAvgMin=Math.round(map(audio.avgMin,calibrated.loudness.min,calibrated.loudness.min,300,1)),audioMin=map(n.min,calibrated.loudness.min,calibrated.silence.min,300,1),audioAvgOsc=map(audio.avgOsc,calibrated.loudness.osc,calibrated.silence.osc,.5,.001),audioOsc=map(audio.avgOsc5,calibrated.loudness.osc,calibrated.silence.osc,.25,0),c0.coordinates.radius=canvasSize*(.375-audioOsc),c1.coordinates.radius=canvasSize*(.25+audioOsc),c2.coordinates.radius=.5*canvasSize}function map(n,a,i,t,e){return a>i?a>n?(n-a)*(e-t)/(i-a)+t:t:i>a?i>n?(n-a)*(e-t)/(i-a)+t:e:void 0}function avg(n){for(var a=0,i=0;i<n.length;i++)a+=n[i];return Math.round(a/n.length)}function max(n){return Math.max.apply(null,n)}function getAvg(n,a,i,t){for(Array.isArray(n[a])||(n[a]=[]);n[a].length>t;)n[a].shift();return n[a].push(i),avg(n[a])}function greatestCommonDivider(n,a){for(;a;){var i=a;a=n%a,n=i}return n}function leastCommonMultiple(n,a){return n=Math.abs(n),a=Math.abs(a),n&&a?Math.abs(n*a/greatestCommonDivider(n,a)):0}function windowResized(){canvasSize=window.innerHeight>window.innerWidth?window.innerWidth:window.innerHeight,createCanvas(window.innerWidth,window.innerHeight)}function keyReleased(n){"k"===n.key&&(console.log("calibrating"),(calibrating=new Calibration(["min","max","osc"])).start(function(n){console.log(n),calibrated=n,calibrating=!1}))}function setup(){window.setupVisual(),window.setupAudio()}function draw(){window.drawVisual(window.drawAudio())}var mic,fft,first,prevMillis,iterator,waveformLength,analyzer,count,vh=1024,vw=1920,measurePoints=1024,measureFreq=1,analyzeFreq=1,avg=function(n){for(var a=0,i=0;i<n.length;i++)a+=n[i];return a/n.length},osc=function(n,a){for(var i=0,t=0,e=0;e<n.length;e++){var o=t;n[e]>a?t=1:n[e]<a&&(t=-1),o!=t&&i++}return i},Analyzer=function(){this.analyze=function(n){var a=avg(n);return{max:Math.max.apply(null,n),min:Math.min.apply(null,n),avg:a,osc:osc(n,a)}},this.measureY=function(n){return(n-=vh/2)<0&&(n=-n),n}};window.setupAudio=function(){analyzer=new Analyzer,(mic=new p5.AudioIn).start(),(fft=new p5.FFT).setInput(mic)},window.drawAudio=function(){var n=fft.waveform();first||(waveformLength=n.length,iterator=parseInt(waveformLength/measurePoints),first=!0);for(var a=[],i=0;i<waveformLength;i+=iterator){var t=map(n[i],-1,1,0,vh);a.push(analyzer.measureY(t))}return analyzer.analyze(a)};var c0={angle:void 0,points:void 0,coordinates:void 0},c1={angle:void 0,points:void 0,coordinates:void 0},c2={angle:void 0,points:void 0,coordinates:void 0},calibrated={silence:{min:0,max:100,avg:20,osc:20},loudness:{min:50,max:300,avg:100,osc:200}},calibrating=!1,abs_min_points=3,abs_max_points=44,average={},canvasSize,audioAvgMax,audioMax,audioAvgMin,audioMin,audioAvgOsc,audioOsc,audio={};window.setupVisual=function(){canvasSize=window.innerHeight>window.innerWidth?window.innerWidth:window.innerHeight,createCanvas(window.innerWidth,window.innerHeight),c0.coordinates=new Coordinates({canvas:canvas,radius:c0.radius,angle:c0.angle}),c1.coordinates=new Coordinates({canvas:canvas,radius:c0.radius,angle:c0.angle}),c2.coordinates=new Coordinates({canvas:canvas,radius:c2.radius,angle:c2.angle})},window.drawVisual=function(n){audio=n,!1!==calibrating?calibrating.listen(n):analyzeAudioData(n),!1===pause()&&drawLines()};var lineCount=0,lineCountMax,reverse=!1,Coordinates=function(n){return this.calculate_coordinates=function(n){return n=n||{x:this.canvas.width/2,y:this.canvas.height/2},n.x-=Math.sin(this.i+=this.angle)*this.radius,n.y+=Math.sin(this.j+=this.angle)*this.radius,n},this.move=function(){return this.pos=this.calculate_coordinates(),this},this.init=function(){this.i=0,this.j=Math.PI/2},this.setOptions=function(n){var a=!0;n.radius?this.radius=n.radius:a=!1,n.angle?this.angle=n.angle:a=!1,n.canvas&&(this.canvas=canvas),a&&this.init()},this.setOptions(n),this},Calibration=function(n){this.seconds=5,this.silence={},this.loudness={},this.calibrationData={},this.resetCalData=function(){this.calibrationData={};for(var a=0;a<n.length;a++)this.calibrationData[n[a]]=[]},this.calibrateMin=function(a){for(var i=0;i<n.length;i++)this.silence[n[i]]=avg(this.calibrationData[n[i]]);a()},this.calibrateMax=function(a){for(var i=0;i<n.length;i++)this.loudness[n[i]]=max(this.calibrationData[n[i]]),this.silence[n[i]]>this.loudness[n[i]]&&(this.loudness[n[i]]=this.silence[n[i]]+20);a()},this.calibrateSilence=function(n){this.resetCalData();var a=window.setInterval(function(i){i.seconds>0?i.seconds--:(window.clearInterval(a),i.seconds=5,i.calibrateMin(function(){i.calibrateLoudness(n)}))},500,this)},this.calibrateLoudness=function(n){this.resetCalData();var a=window.setInterval(function(i){i.seconds>0?i.seconds--:(window.clearInterval(a),i.calibrateMax(function(){n({silence:i.silence,loudness:i.loudness})}))},500,this)},this.start=function(n){this.resetCalData(),this.calibrateSilence(n)},this.listen=function(a){for(var i=0;i<n.length;i++)this.calibrationData[n[i]].push(a[n[i]])}};
